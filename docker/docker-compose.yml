version: '3.8'

services:
  tinyllama:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: tinyllama:latest
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY_REQUIRED=true
      - METRICS_ENABLED=true
      - LOG_LEVEL=INFO
    volumes:
      - tinyllama_data:/app/data
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - tinyllama
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Offline-ready TinyCode with pre-loaded models
  tinyllama-offline:
    build:
      context: ..
      dockerfile: docker/Dockerfile.offline
    restart: unless-stopped
    ports:
      - "8001:8000"
      - "11435:11434"
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY_REQUIRED=true
      - METRICS_ENABLED=true
      - LOG_LEVEL=INFO
      - START_MODE=api
      - OLLAMA_HOST=localhost
      - OLLAMA_PORT=11434
    volumes:
      - tinyllama_offline_data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    profiles:
      - offline

volumes:
  tinyllama_data:
  tinyllama_offline_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge